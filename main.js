// Generated by CoffeeScript 1.3.1
(function() {
  var Answer, EventEmitter, GlobalEvents, Question, User, answers, createUniqueId, questions, uniqueId,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  EventEmitter = require('events').EventEmitter;

  Question = require('./question.js');

  Answer = require('./answer.js');

  User = (function() {

    User.name = 'User';

    function User(socket) {
      this.socket = socket;
      this.id = socket.sessionId;
      this.questions = [];
      GlobalEvents.on('question_added', function(questionId, questionText) {
        return this.socket.emit('question_added', questionId, questionText);
      });
      this.api = {
        question_added: this.addQuestion,
        answer_added: this.addAnswer,
        answer_upvote: this.upvoteAnswer,
        question_followed: this.followQuestion
      };
    }

    User.prototype.addQuestion = function(questionText) {
      var questionId;
      questionId = createUniqueId();
      questions[questionId] = new Question(questionText);
      this.followQuestion(questionId);
      return GlobalEvents.emit('question_added', questionId, questionText);
    };

    User.prototype.addAnswer = function(questionId, answerText) {
      var answer, answerId;
      answerId = createUniqueId();
      answers[answerId] = answer = new Answer(answerText);
      return question[questionId].addAnswer(answer);
    };

    User.prototype.upvoteAnswer = function(answerId) {
      return answers[answerId].upvote(this.id);
    };

    User.prototype.followQuestion = function(questionId) {
      var question;
      this.questions.push(questionId);
      question = questions[questionId];
      question.on('answer_added', function(answer) {
        return this.socket.emit('answer_added', questionId, answer);
      });
      return question.on('answer_upvoted', function(count) {
        return this.socket.emit('answer_upvoted', count);
      });
    };

    return User;

  })();

  questions = {};

  answers = {};

  uniqueId = 0;

  createUniqueId = function() {
    return uniqueId++;
  };

  GlobalEvents = (function(_super) {

    __extends(GlobalEvents, _super);

    GlobalEvents.name = 'GlobalEvents';

    function GlobalEvents() {
      return GlobalEvents.__super__.constructor.apply(this, arguments);
    }

    return GlobalEvents;

  })(EventEmitter);

  GlobalEvents = new GlobalEvents;

  module.exports = {
    User: User
  };

}).call(this);
